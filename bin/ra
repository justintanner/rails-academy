#!/usr/bin/env bash

# ra - A CLI tool for Rails Academy

UBUNTU_DESKTOP=$([[ "$XDG_CURRENT_DESKTOP" == *"GNOME"* ]] && echo true || echo false)
WSL=$([[ -d /mnt/c/Users ]] && echo true || echo false)

function show_help() {
    echo "Usage: ra [command] [arguments]"
    echo ""
    echo "Commands:"
    echo "  details             Show details about current Rails Academy config."
    echo "  light               Switch to the light color theme."
    echo "  dark                Switch to the dark color theme."
    echo "  font [10-99]        Change the terminal font size."
    echo "  update              Update Rails Academy to the latest version."
    echo "  verify              Verify your setup."
}

function update() {
    echo "Updating Rails Academy..."

    if [ -d "$RAILS_ACADEMY_PATH" ]; then
        cd $RAILS_ACADEMY_PATH || exit 1
        git pull
        echo "Please restart your terminal to apply the changes."
    else
        echo "Error: Rails Academy is not installed."
        please_reinstall_message
    fi
}

function please_reinstall_message() {
  echo "Please reinstall Rails Academy. Run the following command:"
  echo "curl -fsSL https://rails.academy/install | bash"
  exit 1
}

function help() {
  echo "usage: app_cli <login | help>"
}

function current_alacritty_config() {
    config_file=~/.alacritty.toml

    if [ "$WSL" = true ]; then
        windows_username=$(echo $PATH | grep -oP '/mnt/c/Users/\K[^/]+')
        WSL_ALACRITTY_PATH=/mnt/c/Users/$windows_username/AppData/Roaming/alacritty
        mkdir -p $WSL_ALACRITTY_PATH

        config_file=$WSL_ALACRITTY_PATH/alacritty.toml
    fi

    if [ -f "$config_file" ]; then
        original_config_path=$RAILS_ACADEMY_PATH/$(platform)/alacritty.toml
        cp $original_config_path $config_file
    fi

     echo $config_file
}

function theme() {
    theme=$1
    config_file=$(current_alacritty_config)
    theme_content=$(<"$RAILS_ACADEMY_PATH/common/$theme.toml")

    # Use sed to replace the block in the config file
    sed -i '' "/### START THEME ###/,/### END THEME ###/c\\
### START THEME ###\\
$theme_content\\
### END THEME ###
" "$config_file"

    echo "Switched to $theme theme."
}

function font() {
    font_size=$1
    config_file=$(current_alacritty_config)

    if [ -z "$font_size" ]; then
        echo "Error: Font size is required."
        echo "Usage: ra font [10-99]"
        exit 1
    fi

    if [ "$font_size" -lt 10 ] || [ "$font_size" -gt 99 ]; then
        echo "Error: Font size must be between 10 and 99."
        exit 1
    fi

    font_content="[font]\nsize = $font_size\n"

    # Use sed to replace the block in the config file
    sed -i '' "/### START FONT ###/,/### END FONT ###/c\\
### START FONT ###\\
$font_content\\
### END FONT ###
" "$config_file"

    echo "Switched to $font_size font size."
}

function platform() {
    if [ "$WSL" = true ]; then
        echo "win"
    elif [ "$UBUNTU_DESKTOP" = true ]; then
        echo "ubuntu"
    else
        echo "mac"
    fi
}

function light() {
    theme "light"
}

function dark() {
    theme "dark"
}

function verify() {
    apps=("git" "gh" "mise" "kamal" "rails" "ruby" "docker" "grep")

    for app in "${apps[@]}"; do
        if ! command -v $app &> /dev/null; then
            echo "Error: $app is not installed."
            please_reinstall_message
        fi
    done

    if ! docker info &> /dev/null; then
        echo "Error: Docker is not running."
        echo "Please launch Docker and try again."
        exit 1
    fi
}

function current_theme() {
    grep 'import' ~/.alacritty.toml | sed -E 's|import = \[".*/(.*)\.toml"\]|\1|'
}

function details() {
    echo "Rails Academy Details:"
    echo "    Version: ${RAILS_ACADEMY_VERSION:-Unknown}"
    echo "   Platform: $(platform)"
    echo -e "\n"
    verify
}

if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

case $1 in
    details)
        details
        ;;
    light)
        light
        ;;
    dark)
        dark
        ;;
    font)
        font $2
        ;;
    upgrade)
        update
        ;;
    update)
        update
        ;;
    verify)
        echo "Verifying setup..."
        verify
        ;;
    *)
        echo "Error: Unknown command '$1'"
        show_help
        exit 1
        ;;
esac
