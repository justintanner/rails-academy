#!/usr/bin/env bash

# ra - A CLI tool for Rails Academy

function show_help() {
    echo "Usage: ra [command] [arguments]"
    echo ""
    echo "Commands:"
    echo "  details             Show details about current Rails Academy config."
    echo "  skool @username     Register your skool username so that you can save you progress and more."
    echo "  update              Update Rails Academy to the latest version."
    echo "  verify              Verify your setup."
}

function update() {
    echo "Updating Rails Academy..."

    if [ -d "$RAILS_ACADEMY_PATH" ]; then
        cd $RAILS_ACADEMY_PATH || exit 1
        git pull
    else
        echo "Error: Rails Academy is not installed."
        please_reinstall_message
    fi
}

function please_reinstall_message() {
  echo "Please reinstall Rails Academy. Run the following command:"
  echo "curl -fsSL https://rails.academy/install | bash"
  exit 1
}

function help {
  echo "usage: app_cli <login | help>"
}

function parse_response {
  if [[ $1 == *"200"* || $1 == *"201"* ]]; then
    echo "$2"
  else
    echo "Error: $1"
    echo "$2"
    exit 1
  fi
}

function request_device_code {
  response=$(curl -s -X POST "https://github.com/login/device/code" \
    -H "Accept: application/json" \
    -d "client_id=$RA_GITHUB_CLIENT_ID")
  echo "$response"
}

function request_token {
  response=$(curl -s -X POST "https://github.com/login/oauth/access_token" \
    -H "Accept: application/json" \
    -d "client_id=$RA_GITHUB_CLIENT_ID" \
    -d "device_code=$1" \
    -d "grant_type=urn:ietf:params:oauth:grant-type:device_code")
  echo "$response"
}

function poll_for_token {
  while true; do
    response=$(request_token "$1")
    error=$(echo "$response" | jq -r '.error')
    access_token=$(echo "$response" | jq -r '.access_token')

    if [[ $error == "authorization_pending" ]]; then
      sleep "$2"
      continue
    elif [[ $error == "slow_down" ]]; then
      sleep $(($2 + 5))
      continue
    elif [[ $error == "expired_token" ]]; then
      echo "The device code has expired. Please run 'login' again."
      exit 1
    elif [[ $error == "access_denied" ]]; then
      echo "Login cancelled by user."
      exit 1
    elif [[ -n $access_token && $access_token != "null" ]]; then
      mkdir -p ~/.local/config/rails-academy
      echo "$access_token" > ~/.local/config/rails-academy/.token
      chmod 600 ~/.local/config/rails-academy/.token
      break
    fi
  done
}

function login {
  if ! command -v jq &> /dev/null; then
    echo "Error: jq is not installed."
    echo "Please install jq and try again."
    exit 1
  fi

  if [ -z "$RA_GITHUB_CLIENT_ID" ]; then
    echo "Error: RA_GITHUB_CLIENT_ID is not set."
    echo "Please set RA_GITHUB_CLIENT_ID in your ~/.config/rails-academy/variables file."
    exit 1
  fi

  if [ -z "$RA_SKOOL" ]; then
    echo "Error: RA_SKOOL is not set."
    echo "Please run 'ra skool @username' to set it."
    exit 1
  fi

  response=$(request_device_code)
  verification_uri=$(echo "$response" | jq -r '.verification_uri')
  user_code=$(echo "$response" | jq -r '.user_code')
  device_code=$(echo "$response" | jq -r '.device_code')
  interval=$(echo "$response" | jq -r '.interval')

  echo -e"\nPlease click or visit: $verification_uri\n"
  echo "Code: $user_code"

  poll_for_token "$device_code" "$interval"

  echo "Successfully authenticated!"
}

function github_username() {
  uri="https://api.github.com/user"

  if [[ ! -f ~/.local/config/rails-academy/.token ]]; then
    echo "You are not authorized. Run the 'login' command."
    exit 1
  fi

  token=$(cat ~/.local/config/rails-academy/.token)

  response=$(curl -s -X GET "$uri" \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer $token")

  login=$(echo "$response" | jq -r '.login')

  if [[ $login == "null" ]]; then
    echo "unavailable (trying ra login)"
  else
    echo $login
  fi
}

function update_config() {
    local variable="$1"
    local value="$2"

    CONFIG_FILE=~/.config/rails-academy/variables

    if grep -q "^export $variable=" "$CONFIG_FILE"; then
        # Update the variable if it exists
        sed -i '' "s|^export $variable=.*|export $variable=\"$value\"|" "$CONFIG_FILE"
    else
        # Add the variable if it doesn't exist
        echo "export $variable=\"$value\"" >> "$CONFIG_FILE"
    fi

    echo "Updated $variable to \"$value\""
    source "$CONFIG_FILE"
}

function register_skool_name() {
  local username="$1"
  response=$(curl -s -o /dev/null -w "%{http_code}" "https://rails.academy/query?sources=skool_name&skool_name.skool_name=$username")
  if [ "$response" -eq 200 ]; then
    update_config "RA_SKOOL" "$username"
    echo "Successfully registered $username"
  else
    echo "Error: Could not find user $username. Please try again later"
    exit 1
  fi
}

function verify() {
    apps=("git" "gh" "mise" "kamal" "rails" "ruby" "docker" "grep")

    for app in "${apps[@]}"; do
        if ! command -v $app &> /dev/null; then
            echo "Error: $app is not installed."
            please_reinstall_message
        fi
    done

    if ! docker info &> /dev/null; then
        echo "Error: Docker is not running."
        echo "Please launch Docker and try again."
        exit 1
    fi
}

function skool() {
    if [ -z "$1" ]; then
        echo "Error: No username provided."
        echo "Usage: ra skool @username"
        exit 1
    fi

    username=$(echo "$1" | xargs)

    if [[ "$username" != @* ]]; then
        echo "Error: Username must start with '@'."
        exit 1
    fi

    register_skool_name "$username"
}

function details() {
    echo "Rails Academy Details:"
    echo "  Path:           $RAILS_ACADEMY_PATH"
    echo "  Skool Username: ${RA_SKOOL:-Not Set! Run 'ra skool @username' to set it}"
    echo "  GitHub Username: $(github_username)"
    echo -e "\n"
    verify
}

if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

case $1 in
    login)
        login
        ;;
    details)
        details
        ;;
    upgrade)
        update
        ;;
    update)
        update
        ;;
    verify)
        echo "Verifying setup..."
        verify
        ;;
    skool)
        shift
        skool "$@"
        ;;
    *)
        echo "Error: Unknown command '$1'"
        show_help
        exit 1
        ;;
esac
